
//asynch Reset

module uart_tx(data_in,
               clk1,
               rst,
               tx_data_out,
               cntrl_in_tx,
               cntrl_out_tx
              );
  
  input [7:0]data_in;
  input clk1, rst;
  output reg tx_data_out;
  input [1:0]cntrl_in_tx;
  output reg [1:0]cntrl_out_tx;

  //reg [14:0]piso_mem;
  reg [9:0]piso_mem;
  reg [9:0]piso_mem_temp;
  reg [9:0]piso_mem_d;
  reg current_state;
  integer count_tx=0;
  integer j=0;

  
  parameter START_BIT = 1'b0;
  parameter STOP_BIT= 1'b1;
  
  initial begin
      tx_data_out='b1;
      cntrl_out_tx='b0;
      piso_mem_temp='b0;
      piso_mem='b0;
      piso_mem_d='b0;
  end

  always @(posedge clk1 or posedge rst)
  begin
      if(rst)
      begin
          piso_mem_temp <= 'hx; 
      end
      else if (~rst && cntrl_in_tx=='d1)
      begin
          piso_mem_temp <={START_BIT,data_in,STOP_BIT}; 
      end
  end

  always @(posedge clk1 or posedge rst)
  begin
      if(~rst && cntrl_in_tx=='d1)
      begin
          for(j=0;j<10;j=j+1)
          begin
              piso_mem[j]<=piso_mem_temp[9-j];
              $display("#PFT piso_mem[%d] = %d",j,piso_mem[j]);
              $display("#PFT piso_mem_temp[9-%d] = %d",j,piso_mem_temp[9-j]);
          end
          $display("PISO_MEM=%h",piso_mem);
      end
      else if(rst)
      begin
          piso_mem <= 'h0; //TODO is initializing it to 0 correct ?
          piso_mem_temp <= 'h0; //TODO is initializing it to 0 correct ?
      end
  end

  always @(posedge clk1 or posedge rst)
  begin
      if(~rst)
      begin
          piso_mem_d<=piso_mem;
      end
      else if(rst)
      begin
          piso_mem_d<='b0;
      end
  end

  always @(posedge clk1 or posedge rst)
  begin
       if(~rst)
       begin
           if(cntrl_in_tx=='d1 && piso_mem)
           begin
              cntrl_out_tx <='d1;
           end
           else if(cntrl_in_tx == 'd2)
           begin
               if(count_tx==10)
               begin
                   $display("PISO Memory Empty");
                   cntrl_out_tx <='d0;
               end
               else
               begin
                   cntrl_out_tx <='d2; //updating tx_data_out, this signal will go to control unit to tell cntrl unit that tx is still txing  
               end
           end
       end
       else if(rst)
       begin
           cntrl_out_tx <='d0;
       end
  end

  always @(posedge clk1 or posedge rst)
  begin
      if(!rst)
      begin
          if(cntrl_in_tx=='d1 && piso_mem)
          begin
              count_tx<=0;
          end
          else if(cntrl_in_tx == 'd2 && count_tx != 10)
          begin
              count_tx<=count_tx+1;
          end
      end
      else if(rst)
      begin
          count_tx<=0;
      end
  end

  always @(posedge clk1 or posedge rst)
  begin
      if(~rst && cntrl_in_tx=='d2)
      begin
          if(count_tx==10)
          begin
              tx_data_out <='b1; //because tx_data_out will be high always, and lower if START bit comes
          end
          else
          begin
              tx_data_out<=piso_mem_d[count_tx];
          end
      end
      else if(rst)
      begin
          tx_data_out<='b1;
      end
  end

endmodule

